#!/usr/bin/env bash

# Get current dir (bin dir)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SSM_DIR="$SCRIPT_DIR/.."
# Source setup support file
source "$SSM_DIR/lib/setup"

function has_newer_secrets_to_decrypt {
  # For keeping track of when the newest secret was committed
  # in order for a client to know when to re-decrypt
  latest_change_ts=-100
  latest_change_commit_hash=""
  latest_change_commit_email=""

  # Decrypt files
  for file in ${SECRET_FILES_FOR_ENCRYPTION[*]}; do
    # Check if this is the latest committed secret file (https://git-scm.com/docs/pretty-formats)
    enc_file_ts=$(git log -n 1 --pretty=format:%ct -- $file.ssm.gpg)
    enc_file_commit_hash=$(git log -n 1 --pretty=format:%h -- $file.ssm.gpg)
    enc_file_commit_email=$(git log -n 1 --pretty=format:%ae -- $file.ssm.gpg)

    if [[ "$enc_file_ts" -gt "$latest_change_ts" ]]; then
      latest_change_ts=$enc_file_ts
      latest_change_commit_hash=$enc_file_commit_hash
      latest_change_commit_email=$enc_file_commit_email
    fi
    # TODO: Refactor into own function / file "encrypted_secrets_newest_timestamp", "encrypted_secrets_newest_commit
  done

  read -r latest_decrypted_commit_hash<$SSM_DIR/.latest_decrypted

  # Are there newer commits than what we have stored?
  if [[ "$latest_change_commit_hash" != "$latest_decrypted_commit_hash" ]]; then
    # Check if author of commit is self.
    # - If self-authored change, do nothing
    # - If not self-authored change, warn user
    self_author_email=$(git config user.email)

    if [[ "$latest_change_commit_email" != "$self_author_email" ]]; then
      # Exit zero - new secrets
      return 0
    fi
  fi

  # Exit zero - no new secrets
  return 1
}

function warn_of_undecrypted_secrets {
  if has_newer_secrets_to_decrypt; then
    echo "[INFO] SSM found new/updated secrets to decrypt."
    echo "[INFO] Run '$SSM_CMD_DECRYPT_SECRETS' to decrypt them."
  fi
}
